{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/profileStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/navbar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","creds","setToken","modalStore","closeModal","logOut","window","localStorage","removeItem","getUser","setImage","setDisplayName","name","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","loadFollowings","loadUserActivities","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","MenuItem","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","str","length","substring","truncate","bio","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","categoryOptions","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Statistic","Divider","setEditMode","isCurrentUser","Tab","Pane","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","target","setTarget","addPhotoMode","setAddPhotoMode","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","objectFit","Meta","menuPosition","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.73d9a6e9.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { store } from '../stores/store';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { PaginatedResult } from '../models/pagination';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof (data) === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>(`/activities`, activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from './profile';\r\n\r\nexport interface Activity {\r\n  id: string;\r\n  title: string;\r\n  date: Date | null;\r\n  description: string;\r\n  category: string;\r\n  city: string;\r\n  venue: string;\r\n  hostUsername: string;\r\n  isCancelled: boolean;\r\n  isGoing: boolean;\r\n  isHost: boolean;\r\n  host?: Profile;\r\n  attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity{\r\n  constructor(init?: ActivityFormValues) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n  id?: string = undefined;\r\n  title: string = '';\r\n  category: string = '';\r\n  description: string = '';\r\n  date: Date | null = null;\r\n  city: string = '';\r\n  venue: string = '';\r\n\r\n  constructor(activity?: ActivityFormValues) {\r\n    if (activity) {\r\n      this.id = activity.id;\r\n      this.title = activity.title;\r\n      this.category = activity.category;\r\n      this.description = activity.description;\r\n      this.date = activity.date;\r\n      this.city = activity.city;\r\n    }\r\n  }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { format } from 'date-fns';\r\nimport { store } from './store';\r\nimport { Profile } from '../models/profile';\r\nimport { Pagination, PagingParams } from '../models/pagination';\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { User, UserFormValues } from '../models/user';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport agent from '../api/agent';\r\nimport { store } from './store';\r\nimport { history } from '../..';\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user)\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n            console.log(user);\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logOut = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user)\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import agent from '../api/agent';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { makeAutoObservable, reaction, runInAction } from 'mobx';\r\nimport { store } from './store';\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false)\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username,\r\n                predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { createContext, useContext } from 'react';\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from './commonStore';\r\nimport UserStore from './userStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport CommentStore from './commentStore';\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { ServerError } from \"../models/serverError\";\r\nimport { makeAutoObservable, reaction } from 'mobx';\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from 'mobx';\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { ChatComment } from '../models/comment';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { store } from './store';\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishinh the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu, MenuItem } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logOut } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <MenuItem position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`}\r\n                                text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logOut} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </MenuItem>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React, { SyntheticEvent } from 'react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import React from 'react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular\r\n                                src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from 'react';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { Link } from 'react-router-dom';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>\r\n                                Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    )\r\n})","import React from 'react';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport Calendar from 'react-calendar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport ActivityList from './ActivityList';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props){\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import React from 'react';\r\nimport { useField } from 'formik';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n]","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Link } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity..' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting}\r\n                            floated='right'\r\n                            positive\r\n                            type='submit'\r\n                            content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' positive type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendance}\r\n                        color='teal'>Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity])\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not found this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\nimport { Cropper } from 'react-cropper';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ loading, uploadPhoto }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview and upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [target, setTarget] = useState('');\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n\r\n\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id} >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),\r\n                                            'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <Tab.Pane><ProfileFollowings /></Tab.Pane> },\r\n        { menuItem: 'Following', render: () => <Tab.Pane><ProfileFollowings /></Tab.Pane> },\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import React, { useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileContent from './ProfileContent';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useParams } from 'react-router';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading Profile' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router';\r\nimport { useStore } from '../stores/store';\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './navbar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage'\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n    ,\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}